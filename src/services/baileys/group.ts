import { WASocket } from "@whiskeysockets/baileys";

export interface GroupInfo {
    id: string;
    subject: string;
    participants: string[];
    admins: string[];
}

// Fun√ß√£o auxiliar para verificar se o bot √© participante usando m√∫ltiplas abordagens
const isBotParticipant = async (sock: WASocket, groupId: string, userId: string): Promise<{ isParticipant: boolean; method: string; details?: any }> => {
    console.log(`üîç Verificando participa√ß√£o do bot usando m√∫ltiplas abordagens...`);
    
    // M√©todo 1: groupFetchAllParticipating
    try {
        console.log(`üìã M√©todo 1: groupFetchAllParticipating`);
        const allGroups = await sock.groupFetchAllParticipating();
        const group = allGroups[groupId];
        
        if (group) {
            const participant = group.participants.find(p => p.id === userId);
            if (participant) {
                console.log(`‚úÖ M√©todo 1: Bot encontrado como participante`);
                return { isParticipant: true, method: 'groupFetchAllParticipating', details: participant };
            }
        }
        console.log(`‚ùå M√©todo 1: Bot n√£o encontrado`);
    } catch (error: any) {
        console.log(`‚ö†Ô∏è M√©todo 1 falhou: ${error.message}`);
    }
    
    // M√©todo 2: groupMetadata
    try {
        console.log(`üìã M√©todo 2: groupMetadata`);
        const groupMetadata = await sock.groupMetadata(groupId);
        const participant = groupMetadata.participants.find(p => p.id === userId);
        
        if (participant) {
            console.log(`‚úÖ M√©todo 2: Bot encontrado como participante`);
            return { isParticipant: true, method: 'groupMetadata', details: participant };
        }
        console.log(`‚ùå M√©todo 2: Bot n√£o encontrado`);
    } catch (error: any) {
        console.log(`‚ö†Ô∏è M√©todo 2 falhou: ${error.message}`);
    }
    
    // M√©todo 3: Tentar enviar uma mensagem de teste (muito silenciosa)
    try {
        console.log(`üìã M√©todo 3: Teste de envio silencioso`);
        // Tenta enviar uma mensagem muito pequena para testar permiss√µes
        const testResult = await sock.sendMessage(groupId, { 
            text: "."
        });
        
        if (testResult) {
            console.log(`‚úÖ M√©todo 3: Bot conseguiu enviar mensagem (√© participante)`);
            return { isParticipant: true, method: 'testMessage', details: testResult };
        }
    } catch (error: any) {
        console.log(`‚ö†Ô∏è M√©todo 3 falhou: ${error.message}`);
    }
    
    // M√©todo 4: Verificar se o grupo est√° na lista de grupos do usu√°rio
    try {
        console.log(`üìã M√©todo 4: Verifica√ß√£o de propriedades do socket`);
        if (sock.user?.id) {
            // Verifica se o grupo est√° listado nas propriedades do socket
            const userGroups = (sock as any).groups;
            if (userGroups && userGroups[groupId]) {
                console.log(`‚úÖ M√©todo 4: Grupo encontrado nas propriedades do socket`);
                return { isParticipant: true, method: 'socketProperties', details: userGroups[groupId] };
            }
        }
        console.log(`‚ùå M√©todo 4: Grupo n√£o encontrado nas propriedades do socket`);
    } catch (error: any) {
        console.log(`‚ö†Ô∏è M√©todo 4 falhou: ${error.message}`);
    }
    
    console.log(`‚ùå Todos os m√©todos falharam - Bot n√£o √© participante`);
    return { isParticipant: false, method: 'allMethodsFailed' };
};

export const findGroupByName = async (sock: WASocket, groupName: string): Promise<string | null> => {
    try {
        console.log(`üîç Buscando grupo com nome: "${groupName}"`);
        
        // Verifica se o socket est√° conectado
        if (!sock.user?.id) {
            console.log(`‚ùå Socket n√£o est√° autenticado`);
            return null;
        }
        
        const userId = sock.user.id; // Captura o ID para usar depois
        console.log(`üë§ ID do usu√°rio autenticado: ${userId}`);
        
        // Busca todos os grupos em que o bot participa
        const groups = await sock.groupFetchAllParticipating();
        console.log(`üìä Total de grupos encontrados: ${Object.keys(groups).length}`);
        
        // Procura por um grupo com nome similar (case insensitive)
        const foundGroup = Object.values(groups).find(group => 
            group.subject.toLowerCase().includes(groupName.toLowerCase())
        );
        
        if (foundGroup) {
            console.log(`‚úÖ Grupo encontrado: "${foundGroup.subject}" (ID: ${foundGroup.id})`);
            console.log(`üë• Total de participantes: ${foundGroup.participants.length}`);
            
            // Log detalhado dos participantes para debug
            console.log(`üîç Verificando participantes do grupo...`);
            foundGroup.participants.forEach((participant, index) => {
                console.log(`  ${index + 1}. ID: ${participant.id}, Admin: ${participant.admin || false}`);
            });
            
            // Verifica se o bot ainda √© participante usando m√∫ltiplas abordagens
            const participationCheck = await isBotParticipant(sock, foundGroup.id, userId);
            
            if (participationCheck.isParticipant) {
                console.log(`‚úÖ Bot confirmado como participante do grupo usando: ${participationCheck.method}`);
                return foundGroup.id;
            } else {
                console.log(`‚ö†Ô∏è Bot n√£o confirmado como participante, mas grupo foi encontrado`);
                console.log(`üìã M√©todo usado: ${participationCheck.method}`);
                
                // Mesmo que a verifica√ß√£o falhe, retorna o ID do grupo
                // O sistema tentar√° enviar a mensagem mesmo assim
                console.log(`üîÑ Retornando ID do grupo para tentativa de envio...`);
                return foundGroup.id;
            }
        }
        
        console.log(`‚ùå Grupo n√£o encontrado com nome: "${groupName}"`);
        return null;
    } catch (error: any) {
        console.error('‚ùå Erro ao buscar grupo por nome:', error);
        
        if (error.message?.includes('not-authorized') || error.message?.includes('forbidden')) {
            console.error('üîí Bot n√£o tem permiss√£o para buscar grupos');
        } else if (error.message?.includes('connection') || error.message?.includes('socket')) {
            console.error('üîå Erro de conex√£o ao buscar grupos');
        }
        
        return null;
    }
};

export const getAllGroups = async (sock: WASocket): Promise<GroupInfo[]> => {
    try {
        // Verifica se o socket est√° conectado
        if (!sock.user?.id) {
            console.log(`‚ùå Socket n√£o est√° autenticado para buscar grupos`);
            return [];
        }
        
        const userId = sock.user.id; // Captura o ID para usar depois
        
        const groups = await sock.groupFetchAllParticipating();
        console.log(`üìä Buscando informa√ß√µes de ${Object.keys(groups).length} grupos...`);
        
        const groupInfos: GroupInfo[] = [];
        
        for (const [groupId, group] of Object.entries(groups)) {
            try {
                // Verifica se o bot ainda √© participante
                const botParticipant = group.participants.find(p => p.id === userId);
                if (!botParticipant) {
                    console.log(`‚ö†Ô∏è Bot n√£o √© mais participante do grupo: ${group.subject}`);
                    continue;
                }
                
                groupInfos.push({
                    id: group.id,
                    subject: group.subject,
                    participants: group.participants.map(p => p.id),
                    admins: group.participants.filter(p => p.admin).map(p => p.id)
                });
            } catch (groupError: any) {
                console.error(`‚ùå Erro ao processar grupo ${group.subject}:`, groupError.message);
                continue;
            }
        }
        
        console.log(`‚úÖ Processados ${groupInfos.length} grupos v√°lidos`);
        return groupInfos;
    } catch (error: any) {
        console.error('‚ùå Erro ao buscar todos os grupos:', error);
        
        if (error.message?.includes('not-authorized') || error.message?.includes('forbidden')) {
            console.error('üîí Bot n√£o tem permiss√£o para buscar grupos');
        } else if (error.message?.includes('connection') || error.message?.includes('socket')) {
            console.error('üîå Erro de conex√£o ao buscar grupos');
        }
        
        return [];
    }
};

export const getGroupInfo = async (sock: WASocket, groupId: string): Promise<GroupInfo | null> => {
    try {
        // Verifica se o socket est√° conectado
        if (!sock.user?.id) {
            console.log(`‚ùå Socket n√£o est√° autenticado para buscar informa√ß√µes do grupo`);
            return null;
        }
        
        const userId = sock.user.id; // Captura o ID para usar depois
        
        console.log(`üîç Buscando informa√ß√µes do grupo: ${groupId}`);
        
        const group = await sock.groupMetadata(groupId);
        console.log(`‚úÖ Grupo encontrado: ${group.subject}`);
        
        // Verifica se o bot ainda √© participante
        const participants = await sock.groupMetadata(groupId);
        const botParticipant = participants.participants.find(p => p.id === userId);
        
        if (!botParticipant) {
            console.log(`‚ùå Bot n√£o √© mais participante do grupo: ${group.subject}`);
            return null;
        }
        
        return {
            id: group.id,
            subject: group.subject,
            participants: participants.participants.map(p => p.id),
            admins: participants.participants.filter(p => p.admin).map(p => p.id)
        };
    } catch (error: any) {
        console.error('‚ùå Erro ao buscar informa√ß√µes do grupo:', error);
        
        if (error.message?.includes('not-authorized') || error.message?.includes('forbidden')) {
            console.error('üîí Bot n√£o tem permiss√£o para acessar este grupo');
        } else if (error.message?.includes('not-found')) {
            console.error('üîç Grupo n√£o encontrado');
        } else if (error.message?.includes('connection') || error.message?.includes('socket')) {
            console.error('üîå Erro de conex√£o ao buscar informa√ß√µes do grupo');
        }
        
        return null;
    }
};

// Nova fun√ß√£o para verificar se um grupo √© v√°lido antes de enviar mensagem
export const validateGroupForMessage = async (sock: WASocket, groupId: string): Promise<{ valid: boolean; error?: string; groupName?: string }> => {
    try {
        if (!sock.user?.id) {
            return { valid: false, error: 'Socket n√£o autenticado' };
        }
        
        const userId = sock.user.id; // Captura o ID para usar depois
        console.log(`üîç Validando grupo ${groupId} para envio de mensagem...`);
        console.log(`üë§ ID do usu√°rio autenticado: ${userId}`);
        
        const group = await sock.groupMetadata(groupId);
        console.log(`‚úÖ Grupo encontrado: ${group.subject}`);
        console.log(`üë• Total de participantes: ${group.participants.length}`);
        
        // Log detalhado dos participantes para debug
        console.log(`üîç Verificando participantes do grupo...`);
        group.participants.forEach((participant, index) => {
            console.log(`  ${index + 1}. ID: ${participant.id}, Admin: ${participant.admin || false}`);
        });
        
        // Verifica se o bot ainda √© participante usando m√∫ltiplas abordagens
        const participationCheck = await isBotParticipant(sock, groupId, userId);
        
        if (participationCheck.isParticipant) {
            console.log(`‚úÖ Bot confirmado como participante do grupo usando: ${participationCheck.method}`);
            return { valid: true, groupName: group.subject };
        } else {
            console.log(`‚ö†Ô∏è Bot n√£o confirmado como participante, mas continuando...`);
            console.log(`üìã M√©todo usado: ${participationCheck.method}`);
            
            // Mesmo que a verifica√ß√£o falhe, considera v√°lido para tentar envio
            // O sistema tentar√° enviar a mensagem mesmo assim
            return { valid: true, groupName: group.subject };
        }
    } catch (error: any) {
        console.error(`‚ùå Erro ao validar grupo ${groupId}:`, error);
        
        if (error.message?.includes('not-authorized') || error.message?.includes('forbidden')) {
            return { valid: false, error: 'Bot n√£o tem permiss√£o para acessar este grupo' };
        }
        
        if (error.message?.includes('not-found')) {
            return { valid: false, error: 'Grupo n√£o encontrado ou bot foi removido' };
        }
        
        return { valid: false, error: `Erro ao validar grupo: ${error.message}` };
    }
};
